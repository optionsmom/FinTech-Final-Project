
pragma solidity ^0.7.0;

contract digeSTATE {
	// Declare state variables in this section

	
	uint8 private decimals;                             // Decimals of our Shares. Has to be 0.
	uint256 constant private MAX_UINT256 = 2**256 - 1;  // Very large number.
	uint256 public totalSupply;                         // By default 100 for 100% ownership. Can be changed.
	uint256 public totalSupply2;                        // Only digeSTATE incoming of multiples of this variable will be allowed. This way we can have two itterations of divisions through totalSupply without remainder.
	
	string public name;                                 // The name of our asset (token). Can be determined in Constructor _propertyID
	string public symbol;                               // The Symbol of our asset (token). Can be determined in Constructor _propertySymbol

	address public REIT = msg.sender;    	            // REIT will deploy contract.
	address public mainREITManager;                     // Can become mainREITManager by claimOwnership if owning > 51% of token.
	
	address[] public stakeholders;                      // Array of stakeholders. REIT can addStakeholder or removeStakeholder. Recipient of token needs to be isStakeholder = true to be able to receive token. mainREITManager & REIT are stakeholder by default.

	mapping (address => uint256) public revenues;       // Distributed revenue account ballance for each stakeholder including REIT.
	mapping (address => uint256) public shares;         // Addresses mapped to token ballances.
	mapping (address => mapping (address => uint256)) private allowed;   // All addresses allow unlimited token withdrawals by the REIT.
	mapping (address => uint256) public sharesOffered;  //Number of Shares a Stakeholder wants to offer to other stakeholders
    mapping (address => uint256) public shareSellPrice; // Price per Share a Stakeholder wants to have when offering to other Stakeholders




	// Define events


	event ShareTransfer(address indexed from, address indexed to, uint256 shares);
	event Seizure(address indexed seizedfrom, address indexed to, uint256 shares);
	event mainREITManager(address NewMainREITMananger);
	event NewStakeHolder(address StakeholderAdded);
	event StakeHolderBanned (address banned);
	event RevenuesDistributed (address shareholder, uint256 gained, uint256 total);
	event Withdrawal (address shareholder, uint256 withdrawn);
	event SharesOffered(address Seller, uint256 AmmountShares, uint256 PricePerShare);
	event SharesSold(address Seller, address Buyer, uint256 SharesSold,uint256 PricePerShare);


	constructor (string memory _propertyID, string memory _propertySymbol, address _mainPropertyOwner) {
		shares[_mainPropertyOwner] = 100;                   //one main Shareholder to be declared by REIT to get all initial shares.
		totalSupply = 100;                                  //supply fixed to 100 for now, Can also work with 10, 1000, 10 000...
		totalSupply2 = totalSupply**2;                      //above to the power of 2
		name = _propertyID;
		decimals = 0;
		symbol = _propertySymbol;
		mainREITManager = _mainREITManager;
		stakeholders.push(REIT);                             //REIT & mainREITManager pushed to stakeholdersarray upon construction to allow payout and transfers
		stakeholders.push(mainREITManager);
		allowed[mainREITManager][REIT] = MAX_UINT256;      //REIT can take all digeSTATE from mainREITManager with seizureFrom
	}

	// Define modifiers in this section

	modifier onlyREIT{
	  require(msg.sender == REIT);
	  _;
	}
	modifier onlyREITManager{
	    require(msg.sender == mainREITManager);
	    _;
	}
	modifier isMultipleOf{
	   require(msg.value % totalSupply2 == 0);              //modulo operation, only allow digeSTATE amounts that are multiles of totalsupply2. This is because there is no float and we will divide incoming amounts two times to split it up and we do not want a remainder.
	    _;
	}
	

	// Define functions in this section

//viewable functions

	function showSharesOf(address _owner) public view returns (uint256 balance) {       //shows shares for each address.
		return shares[_owner];
	}

	 function isStakeholder(address _address) public view returns(bool, uint256) {      //shows whether someone is a stakeholder.
	    for (uint256 s = 0; s < stakeholders.length; s += 1){
	        if (_address == stakeholders[s]) return (true, s);
	    }
	    return (false, 0);
	 }

    

//functions of REIT

    function addStakeholder(address _stakeholder) public onlyREIT {      //can add more stakeholders.
		(bool _isStakeholder, ) = isStakeholder(_stakeholder);
		if (!_isStakeholder) stakeholders.push(_stakeholder);
		allowed[_stakeholder][REIT] = MAX_UINT256;                       //unlimited allowance to withdraw Shares for REIT --> REIT can seize shares.
		emit NewStakeHolder (_stakeholder);
    }

	function banStakeholder(address _stakeholder) public onlyREIT {          // can remove stakeholder from stakeholders array and...
	    (bool _isStakeholder, uint256 s) = isStakeholder(_stakeholder);
	    if (_isStakeholder){
	        stakeholders[s] = stakeholders[stakeholders.length - 1];
	        stakeholders.pop();
	        seizureFrom (_stakeholder, msg.sender,shares[_stakeholder]);    //...seizes shares
	        emit StakeHolderBanned(_stakeholder);
	    }
	}



//hybrid REIT

	function seizureFrom(address _from, address _to, uint256 _value) public returns (bool success) {           //REIT has unlimited allowance, therefore  can seize all assets from every stakeholder. Function also used to buyShares from Stakeholder.
		uint256 allowance = allowed[_from][msg.sender];
		require(shares[_from] >= _value && allowance >= _value);
		shares[_to] += _value;
		shares[_from] -= _value;
		if (allowance < MAX_UINT256) {
			allowed[_from][msg.sender] -= _value;
		}
		emit Seizure(_from, _to, _value);
		return true;
	}

//mainREITManager functions

	function limitadvancedrent(uint8 _monthstolimit) onlyREITManager public{      //REITManager can decide how many months in advance the property can be rented out max
	    rentalLimitBlocks = _monthstolimit *blocksPer30Day;
	    emit PrePayRentLimit (_monthstolimit);
	}

    function setRentper30Day(uint256 _rent) public onlyREITManager{               //REITManager can set rentPer30Day in digeSTATE
	    rentPer30Day = _rent;
	    emit RentPer30DaySetTo (rentPer30Day);
    }

//Stakeholder functions

    function offerShares(uint256 _sharesOffered, uint256 _shareSellPrice) public{       //Stakeholder can offer # of Shares for Price per Share
        (bool _isStakeholder, ) = isStakeholder(msg.sender);
        require(_isStakeholder);
        require(_sharesOffered <= shares[msg.sender]);
        sharesOffered[msg.sender] = _sharesOffered;
        shareSellPrice[msg.sender] = _shareSellPrice;
        emit SharesOffered(msg.sender, _sharesOffered, _shareSellPrice);
    }

    function buyShares (uint256 _sharesToBuy, address payable _from) public payable{    //Stakeholder can buy shares from seller for sellers price * amount of shares
        (bool _isStakeholder, ) = isStakeholder(msg.sender);
        require(_isStakeholder);
        require(msg.value == _sharesToBuy * shareSellPrice[_from] && _sharesToBuy <= sharesOffered[_from] && _sharesToBuy <= shares[_from] &&_from != msg.sender); //
        allowed[_from][msg.sender] = _sharesToBuy;
        seizureFrom(_from, msg.sender, _sharesToBuy);
        sharesOffered[_from] -= _sharesToBuy;
        _from.transfer(msg.value);
        emit SharesSold(_from, msg.sender, _sharesToBuy,shareSellPrice[_from]);
    }

	function transfer(address _recipient, uint256 _amount) public returns (bool) {      //transfer of digeSTATE, requires isStakeholder
        (bool isStakeholderX, ) = isStakeholder(_recipient);
	    require(isStakeholderX);
	    require(shares[msg.sender] >= _amount);
	    shares[msg.sender] -= _amount;
	    shares[_recipient] += _amount;
	    emit ShareTransfer(msg.sender, _recipient, _amount);
	    return true;
	 }



	function claimOwnership () public {             //claim main asset ownership
		require(shares[msg.sender] > (totalSupply /2) && msg.sender != mainREITManager,"Error. You do not own more than 50% of the property tokens or you are the main owner already");
		mainREITManager = msg.sender;
		emit MainPropertyOwner(mainREITManager);
	}



   function withdraw() payable public {          //revenues can be withdrawn from individual shareholders (REIT can too withdraw its own revenues)
        uint256 revenue = revenues[msg.sender];
        revenues[msg.sender] = 0;
        (msg.sender).transfer(revenue);
        emit Withdrawal(msg.sender, revenue);
   }

    
}